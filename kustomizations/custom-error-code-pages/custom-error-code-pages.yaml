apiVersion: v1
data:
  error-page-404.http: "HTTP/1.0 404 File Not Found\nCache-Control: no-cache\nConnection: close\nContent-Type: text/html\n\n<!DOCTYPE html>\n<!--\n    Error 404: Not Found\n    Description:
    The server can not find the requested page\n-->\n<html lang=\"en\">\n<head>\n
    \   <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width,
    initial-scale=1\"/>\n    <meta name=\"robots\" content=\"noindex, nofollow\"/>\n
    \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n    <title>404
    | Not Found</title>\n    <link rel=\"preconnect\" href=\"https://fonts.bunny.net\"
    crossorigin>\n    <link rel=\"dns-prefetch\" href=\"https://fonts.bunny.net\">\n
    \   <link href=\"https://fonts.bunny.net/css2?family=Red+Hat+Display:wght@500&family=Fira+Mono&family=Ubuntu&display=swap\"
    rel=\"stylesheet\"/>\n    <style>\n        /** Idea author: https://github.com/186526/CloudflareCustomErrorPage
    */\n        :root{--color-bg-primary:#fff;--color-text-primary:#000;--color-text-secondary:#575958;--font-size-primary:56px;--font-size-secondary:20px;--ui-card-color-bg:#f2f2f2;--color-text-ok:#137333;--color-bg-ok:#e6f4ea;--color-text-error:#c5221f;--color-bg-error:#fce8e6;--color-text-warning:#b05a00;--color-bg-warning:#fef7e0;--icon-size:48px}\n
    \       @media (prefers-color-scheme:dark){\n            :root{--color-bg-primary:#111;--color-text-primary:rgba(255,
    255, 255, 0.86);--color-text-secondary:rgba(255, 255, 255, 0.4);--ui-card-color-bg:rgba(40,
    40, 40, 0.73);--color-bg-ok:#07220f;--color-bg-error:#270501;--color-bg-warning:#392605}\n
    \       }\n        body{margin:2rem 2rem;font-family:'Red Hat Display',Ubuntu,Roboto,'Noto
    Sans SC',sans-serif;color:var(--color-text-primary);background-color:var(--color-bg-primary)}\n
    \       header{margin-left:1rem}\n        header .error-code{font-size:var(--font-size-primary);line-height:var(--font-size-primary);font-family:'Fira
    Mono',Ubuntu,monospace;font-weight:400;margin:0 0 0 10px}\n        header .error-description{font-family:Ubuntu,Roboto,'Noto
    Sans SC',sans-serif;font-size:var(--font-size-secondary);color:var(--color-text-secondary);margin:0
    0 0 10px}\n        code{font-family:'Fira Mono',monospace}\n        .status{margin-top:2.5rem;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;align-items:center}\n
    \       .card{background-color:var(--ui-card-color-bg);padding:2rem;margin:1rem
    1rem;min-height:3rem;border-radius:9px;flex-grow:1}\n        .arrows svg{fill:var(--color-text-secondary)}\n
    \       .icon svg{width:var(--icon-size);height:auto;fill:var(--color-text-primary)}\n
    \       .card.ok{background-color:var(--color-bg-ok)}.card.ok .status-text{color:var(--color-text-ok)}.card.ok
    svg{fill:var(--color-text-ok)}\n        .card.error{background-color:var(--color-bg-error)}.card.error
    .status-text{color:var(--color-text-error)}.card.error svg{fill:var(--color-text-error)}\n
    \       .card.warning{background-color:var(--color-bg-warning)}.card.warning .status-text{color:var(--color-text-warning)}.card.warning
    svg{fill:var(--color-text-warning)}\n        .card main{font-size:calc(var(--font-size-secondary)
    + .1rem)}\n        .card .status-text,.reason p{margin:0;font-family:Ubuntu,Roboto,Noto
    Sans SC,sans-serif}\n        .reason p{line-height:125%}\n        a{text-decoration:none;color:#1967d2}\n
    \       .reason{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;align-items:baseline}\n
    \       .reason>*{display:block;margin:1rem;flex-grow:1;max-width:40%}\n        .reason
    h2{font-size:calc(var(--font-size-secondary) + .2rem);margin:0 0 .6em 0;font-weight:550}\n
    \       footer{margin:1rem;color:var(--color-text-secondary);font-size:0}\n        /*
    \ */\n        @media screen and (max-width:820px){\n            .arrows{display:none}\n
    \       }\n        @media screen and (max-width:480px){\n            .reason>*{max-width:100%}\n
    \           /*  */\n        }\n        @media screen and (min-width:768px){\n
    \           body{margin:8% 10%}\n            header>*{display:inline-block;margin-left:1%}\n
    \       }\n    </style>\n</head>\n<body>\n<header>\n    <h1 class=\"error-code\">404</h1>\n
    \   <p class=\"error-description\">Not Found</p>\n</header>\n<div class=\"status\">\n
    \   <div class=\"card warning\" id=\"client-status-card\">\n        <i class=\"icon\">\n
    \           <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0
    0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\"
    fill=\"none\"/>\n                <path d=\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89
    2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm0 14H5V8h14v10z\"/>\n            </svg>\n
    \       </i>\n        <main data-l10n>Your Client</main>\n        <p class=\"status-text\"
    data-l10n>Unknown</p>\n    </div>\n\n    <div class=\"arrows\">\n        <svg
    xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" width=\"24px\" fill=\"#000000\">\n
    \           <defs>\n                <symbol id=\"arrows-horizontal\" viewBox=\"0
    0 24 24\">\n                    <rect fill=\"none\" height=\"24\" width=\"24\"
    x=\"0\"/>\n                    <polygon points=\"7.41,13.41 6,12 2,16 6,20 7.41,18.59
    5.83,17 21,17 21,15 5.83,15\"/>\n                    <polygon points=\"16.59,10.59
    18,12 22,8 18,4 16.59,5.41 18.17,7 3,7 3,9 18.17,9\"/>\n                </symbol>\n
    \           </defs>\n            <use href=\"#arrows-horizontal\"/>\n        </svg>\n
    \   </div>\n\n    <div class=\"card ok\" id=\"network-status-card\">\n        <i
    class=\"icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"
    viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path
    d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n                <path d=\"M12 6c2.62 0
    4.88 1.86 5.39 4.43l.3 1.5 1.53.11c1.56.1 2.78 1.41 2.78 2.96 0 1.65-1.35 3-3
    3H6c-2.21 0-4-1.79-4-4 0-2.05 1.53-3.76 3.56-3.97l1.07-.11.5-.95C8.08 7.14 9.94
    6 12 6m0-2C9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76
    0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96C18.67 6.59 15.64 4 12 4z\"/>\n            </svg>\n
    \       </i>\n        <main data-l10n>Network</main>\n        <p class=\"status-text\"
    data-l10n>Working</p>\n    </div>\n\n    <div class=\"arrows\">\n        <svg
    xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" width=\"24px\" fill=\"#000000\">\n
    \           <use href=\"#arrows-horizontal\" />\n        </svg>\n    </div>\n\n
    \   <div class=\"card warning\" id=\"server-status-card\">\n        <i class=\"icon\">\n
    \           <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0
    0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\"
    fill=\"none\"/>\n                <path d=\"M19 15v4H5v-4h14m1-2H4c-.55 0-1 .45-1
    1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 18.5c-.82 0-1.5-.67-1.5-1.5s.68-1.5
    1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM19 5v4H5V5h14m1-2H4c-.55 0-1 .45-1 1v6c0
    .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 8.5c-.82 0-1.5-.67-1.5-1.5S6.18
    5.5 7 5.5s1.5.68 1.5 1.5S7.83 8.5 7 8.5z\"/>\n            </svg>\n        </i>\n
    \       <main data-l10n>Web Server</main>\n        <p class=\"status-text\" data-l10n>Unknown</p>\n
    \   </div>\n</div>\n<div class=\"reason\">\n    <div class=\"what-happened\">\n
    \       <h2 data-l10n>What happened?</h2>\n        <p class=\"description\" data-l10n>The
    server can not find the requested page</p>\n    </div>\n    <div class=\"what-can-i-do\">\n
    \       <h2 data-l10n>What can I do?</h2>\n        <p class=\"description\" data-l10n>Please
    try again in a few minutes</p>\n    </div>\n</div>\n</body>\n<footer>\n    \n</footer>\n<script>\n
    \   const errorCode = parseInt(`404`, 10);\n\n    if (typeof errorCode !== 'undefined'
    && !isNaN(errorCode)) {\n        /**\n         * @param {HTMLElement} $card\n
    \        * @param { {isOk?: boolean, isWarning?: boolean, isError?: boolean} }
    state\n         * @param {string} statusText\n         */\n        const setCardState
    = function ($card, state, statusText) {\n            const okClass = 'ok', warnClass
    = 'warning', errClass = 'error',\n                $statusText = $card.querySelectorAll('.status-text');\n\n
    \           switch (true) {\n                case state.isOk === true:\n                    $card.classList.remove(errClass,
    warnClass);\n                    $card.classList.add(okClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n\n                case
    state.isWarning === true:\n                    $card.classList.remove(okClass,
    errClass);\n                    $card.classList.add(warnClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n\n                case
    state.isError === true:\n                    $card.classList.remove(okClass, warnClass);\n
    \                   $card.classList.add(errClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n            }\n
    \       };\n\n        /**\n         * @param { {whatHappened?: string, whatToDo?:
    string} } reasons\n         */\n        const setReasons = function (reasons)
    {\n            const descSelector = '.description';\n\n            Array.prototype.forEach.call(document.getElementsByClassName('what-happened'),
    ($el) => {\n                if (typeof reasons.whatHappened === 'string' && reasons.whatHappened.length
    > 0) {\n                    Array.prototype.forEach.call($el.querySelectorAll(descSelector),
    ($desc)  => $desc.innerText = reasons.whatHappened);\n                } else {\n
    \                   $el.remove();\n                }\n            });\n\n            Array.prototype.forEach.call(document.getElementsByClassName('what-can-i-do'),
    ($el) => {\n                if (typeof reasons.whatToDo === 'string' && reasons.whatToDo.length
    > 0) {\n                    Array.prototype.forEach.call($el.querySelectorAll(descSelector),
    ($desc)  => $desc.innerText = reasons.whatToDo);\n                } else {\n                    $el.remove();\n
    \               }\n            });\n        };\n\n        /**\n         * @param
    {string} text\n         */\n        const setErrorDescription = function (text)
    {\n            Array.prototype.forEach.call(document.getElementsByClassName('error-description'),
    function ($el) {\n                $el.innerHTML = text;\n            });\n        };\n\n
    \       const message = `Not Found`.trim(), cards = {\n            $client: document.getElementById('client-status-card'),\n
    \           $network: document.getElementById('network-status-card'),\n            $server:
    document.getElementById('server-status-card'),\n        };\n\n        let whatToDo
    = 'Please try again in a few minutes';\n\n        switch (true) {\n            case
    errorCode >= 400 && errorCode <= 499:\n                switch (errorCode) {\n
    \                   case 400: case 405: case 411: case 413: whatToDo = 'Please
    try to change the request method, headers, payload, or URL'; break;\n                    case
    401: case 403: case 407: whatToDo = 'Please check your authorization data'; break;\n
    \                   case 404: whatToDo = 'Please double-check the URL and try
    again'; break;\n                    case 409: case 410: case 418: whatToDo = '¯\\\\_(ツ)_/¯';
    break;\n                }\n\n                setErrorDescription(`<span data-l10n>${message}</span>
    (<span data-l10n>client-side error</span>)`);\n                setCardState(cards.$client,
    {isError: true}, message)\n                setCardState(cards.$network, {isOk:
    true}, 'Working')\n                setCardState(cards.$server, {isOk: true}, 'Working')\n
    \               break;\n\n            case errorCode >= 500 && errorCode <= 599:\n
    \               setErrorDescription(`<span data-l10n>${message}</span> (<span
    data-l10n>server-side error</span>)`);\n                setCardState(cards.$client,
    {isOk: true}, 'Working')\n                setCardState(cards.$network, {isOk:
    true}, 'Working')\n                setCardState(cards.$server, {isError: true},
    message)\n                break;\n\n            default:\n                setErrorDescription(message);\n
    \               setCardState(cards.$client, {isWarning: true}, 'Unknown')\n                setCardState(cards.$network,
    {isOk: true}, 'Working')\n                setCardState(cards.$server, {isWarning:
    true}, 'Unknown')\n                break;\n        }\n\n        setReasons({whatHappened:
    `The server can not find the requested page`.trim(), whatToDo: whatToDo.trim()});\n
    \   } else {\n        console.warn('Cannot parse the error code:', errorCode);\n
    \   }\n\n    // \n    if (navigator.language.substring(0, 2).toLowerCase() !==
    'en') {\n        ((s, p) => { // localize the page (details here - https://github.com/tarampampam/error-pages/tree/master/l10n)\n
    \           s.src = 'https://cdn.jsdelivr.net/gh/tarampampam/error-pages@2/l10n/l10n.min.js';
    // '../l10n/l10n.js';\n            s.async = s.defer = true;\n            s.addEventListener('load',
    () => p.removeChild(s));\n            p.appendChild(s);\n        })(document.createElement('script'),
    document.body);\n    }\n    // \n</script>\n<!--\n    Error 404: Not Found\n    Description:
    The server can not find the requested page\n-->\n</html>\n"
  error-page-503.http: "HTTP/1.0 503 Service Unavailable\nCache-Control: no-cache\nConnection: close\nContent-Type: text/html\n\n<!DOCTYPE html>\n<!--\n    Error 503: Service Unavailable\n
    \   Description: The server is temporarily overloading or down\n-->\n<html lang=\"en\">\n<head>\n
    \   <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width,
    initial-scale=1\"/>\n    <meta name=\"robots\" content=\"noindex, nofollow\"/>\n
    \   <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n    <title>503
    | Service Unavailable</title>\n    <link rel=\"preconnect\" href=\"https://fonts.bunny.net\"
    crossorigin>\n    <link rel=\"dns-prefetch\" href=\"https://fonts.bunny.net\">\n
    \   <link href=\"https://fonts.bunny.net/css2?family=Red+Hat+Display:wght@500&family=Fira+Mono&family=Ubuntu&display=swap\"
    rel=\"stylesheet\"/>\n    <style>\n        /** Idea author: https://github.com/186526/CloudflareCustomErrorPage
    */\n        :root{--color-bg-primary:#fff;--color-text-primary:#000;--color-text-secondary:#575958;--font-size-primary:56px;--font-size-secondary:20px;--ui-card-color-bg:#f2f2f2;--color-text-ok:#137333;--color-bg-ok:#e6f4ea;--color-text-error:#c5221f;--color-bg-error:#fce8e6;--color-text-warning:#b05a00;--color-bg-warning:#fef7e0;--icon-size:48px}\n
    \       @media (prefers-color-scheme:dark){\n            :root{--color-bg-primary:#111;--color-text-primary:rgba(255,
    255, 255, 0.86);--color-text-secondary:rgba(255, 255, 255, 0.4);--ui-card-color-bg:rgba(40,
    40, 40, 0.73);--color-bg-ok:#07220f;--color-bg-error:#270501;--color-bg-warning:#392605}\n
    \       }\n        body{margin:2rem 2rem;font-family:'Red Hat Display',Ubuntu,Roboto,'Noto
    Sans SC',sans-serif;color:var(--color-text-primary);background-color:var(--color-bg-primary)}\n
    \       header{margin-left:1rem}\n        header .error-code{font-size:var(--font-size-primary);line-height:var(--font-size-primary);font-family:'Fira
    Mono',Ubuntu,monospace;font-weight:400;margin:0 0 0 10px}\n        header .error-description{font-family:Ubuntu,Roboto,'Noto
    Sans SC',sans-serif;font-size:var(--font-size-secondary);color:var(--color-text-secondary);margin:0
    0 0 10px}\n        code{font-family:'Fira Mono',monospace}\n        .status{margin-top:2.5rem;display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;align-items:center}\n
    \       .card{background-color:var(--ui-card-color-bg);padding:2rem;margin:1rem
    1rem;min-height:3rem;border-radius:9px;flex-grow:1}\n        .arrows svg{fill:var(--color-text-secondary)}\n
    \       .icon svg{width:var(--icon-size);height:auto;fill:var(--color-text-primary)}\n
    \       .card.ok{background-color:var(--color-bg-ok)}.card.ok .status-text{color:var(--color-text-ok)}.card.ok
    svg{fill:var(--color-text-ok)}\n        .card.error{background-color:var(--color-bg-error)}.card.error
    .status-text{color:var(--color-text-error)}.card.error svg{fill:var(--color-text-error)}\n
    \       .card.warning{background-color:var(--color-bg-warning)}.card.warning .status-text{color:var(--color-text-warning)}.card.warning
    svg{fill:var(--color-text-warning)}\n        .card main{font-size:calc(var(--font-size-secondary)
    + .1rem)}\n        .card .status-text,.reason p{margin:0;font-family:Ubuntu,Roboto,Noto
    Sans SC,sans-serif}\n        .reason p{line-height:125%}\n        a{text-decoration:none;color:#1967d2}\n
    \       .reason{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:space-between;align-items:baseline}\n
    \       .reason>*{display:block;margin:1rem;flex-grow:1;max-width:40%}\n        .reason
    h2{font-size:calc(var(--font-size-secondary) + .2rem);margin:0 0 .6em 0;font-weight:550}\n
    \       footer{margin:1rem;color:var(--color-text-secondary);font-size:0}\n        /*
    \ */\n        @media screen and (max-width:820px){\n            .arrows{display:none}\n
    \       }\n        @media screen and (max-width:480px){\n            .reason>*{max-width:100%}\n
    \           /*  */\n        }\n        @media screen and (min-width:768px){\n
    \           body{margin:8% 10%}\n            header>*{display:inline-block;margin-left:1%}\n
    \       }\n    </style>\n</head>\n<body>\n<header>\n    <h1 class=\"error-code\">503</h1>\n
    \   <p class=\"error-description\">Service Unavailable</p>\n</header>\n<div class=\"status\">\n
    \   <div class=\"card warning\" id=\"client-status-card\">\n        <i class=\"icon\">\n
    \           <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0
    0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\"
    fill=\"none\"/>\n                <path d=\"M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89
    2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm0 14H5V8h14v10z\"/>\n            </svg>\n
    \       </i>\n        <main data-l10n>Your Client</main>\n        <p class=\"status-text\"
    data-l10n>Unknown</p>\n    </div>\n\n    <div class=\"arrows\">\n        <svg
    xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" width=\"24px\" fill=\"#000000\">\n
    \           <defs>\n                <symbol id=\"arrows-horizontal\" viewBox=\"0
    0 24 24\">\n                    <rect fill=\"none\" height=\"24\" width=\"24\"
    x=\"0\"/>\n                    <polygon points=\"7.41,13.41 6,12 2,16 6,20 7.41,18.59
    5.83,17 21,17 21,15 5.83,15\"/>\n                    <polygon points=\"16.59,10.59
    18,12 22,8 18,4 16.59,5.41 18.17,7 3,7 3,9 18.17,9\"/>\n                </symbol>\n
    \           </defs>\n            <use href=\"#arrows-horizontal\"/>\n        </svg>\n
    \   </div>\n\n    <div class=\"card ok\" id=\"network-status-card\">\n        <i
    class=\"icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"
    viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path
    d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n                <path d=\"M12 6c2.62 0
    4.88 1.86 5.39 4.43l.3 1.5 1.53.11c1.56.1 2.78 1.41 2.78 2.96 0 1.65-1.35 3-3
    3H6c-2.21 0-4-1.79-4-4 0-2.05 1.53-3.76 3.56-3.97l1.07-.11.5-.95C8.08 7.14 9.94
    6 12 6m0-2C9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76
    0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96C18.67 6.59 15.64 4 12 4z\"/>\n            </svg>\n
    \       </i>\n        <main data-l10n>Network</main>\n        <p class=\"status-text\"
    data-l10n>Working</p>\n    </div>\n\n    <div class=\"arrows\">\n        <svg
    xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" width=\"24px\" fill=\"#000000\">\n
    \           <use href=\"#arrows-horizontal\" />\n        </svg>\n    </div>\n\n
    \   <div class=\"card warning\" id=\"server-status-card\">\n        <i class=\"icon\">\n
    \           <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0
    0 24 24\" width=\"24px\" fill=\"#000000\">\n                <path d=\"M0 0h24v24H0V0z\"
    fill=\"none\"/>\n                <path d=\"M19 15v4H5v-4h14m1-2H4c-.55 0-1 .45-1
    1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 18.5c-.82 0-1.5-.67-1.5-1.5s.68-1.5
    1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zM19 5v4H5V5h14m1-2H4c-.55 0-1 .45-1 1v6c0
    .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 8.5c-.82 0-1.5-.67-1.5-1.5S6.18
    5.5 7 5.5s1.5.68 1.5 1.5S7.83 8.5 7 8.5z\"/>\n            </svg>\n        </i>\n
    \       <main data-l10n>Web Server</main>\n        <p class=\"status-text\" data-l10n>Unknown</p>\n
    \   </div>\n</div>\n<div class=\"reason\">\n    <div class=\"what-happened\">\n
    \       <h2 data-l10n>What happened?</h2>\n        <p class=\"description\" data-l10n>The
    server is temporarily overloading or down</p>\n    </div>\n    <div class=\"what-can-i-do\">\n
    \       <h2 data-l10n>What can I do?</h2>\n        <p class=\"description\" data-l10n>Please
    try again in a few minutes</p>\n    </div>\n</div>\n</body>\n<footer>\n    \n</footer>\n<script>\n
    \   const errorCode = parseInt(`503`, 10);\n\n    if (typeof errorCode !== 'undefined'
    && !isNaN(errorCode)) {\n        /**\n         * @param {HTMLElement} $card\n
    \        * @param { {isOk?: boolean, isWarning?: boolean, isError?: boolean} }
    state\n         * @param {string} statusText\n         */\n        const setCardState
    = function ($card, state, statusText) {\n            const okClass = 'ok', warnClass
    = 'warning', errClass = 'error',\n                $statusText = $card.querySelectorAll('.status-text');\n\n
    \           switch (true) {\n                case state.isOk === true:\n                    $card.classList.remove(errClass,
    warnClass);\n                    $card.classList.add(okClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n\n                case
    state.isWarning === true:\n                    $card.classList.remove(okClass,
    errClass);\n                    $card.classList.add(warnClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n\n                case
    state.isError === true:\n                    $card.classList.remove(okClass, warnClass);\n
    \                   $card.classList.add(errClass);\n                    $statusText.forEach(($statusText)
    => $statusText.innerText = statusText);\n                    break;\n            }\n
    \       };\n\n        /**\n         * @param { {whatHappened?: string, whatToDo?:
    string} } reasons\n         */\n        const setReasons = function (reasons)
    {\n            const descSelector = '.description';\n\n            Array.prototype.forEach.call(document.getElementsByClassName('what-happened'),
    ($el) => {\n                if (typeof reasons.whatHappened === 'string' && reasons.whatHappened.length
    > 0) {\n                    Array.prototype.forEach.call($el.querySelectorAll(descSelector),
    ($desc)  => $desc.innerText = reasons.whatHappened);\n                } else {\n
    \                   $el.remove();\n                }\n            });\n\n            Array.prototype.forEach.call(document.getElementsByClassName('what-can-i-do'),
    ($el) => {\n                if (typeof reasons.whatToDo === 'string' && reasons.whatToDo.length
    > 0) {\n                    Array.prototype.forEach.call($el.querySelectorAll(descSelector),
    ($desc)  => $desc.innerText = reasons.whatToDo);\n                } else {\n                    $el.remove();\n
    \               }\n            });\n        };\n\n        /**\n         * @param
    {string} text\n         */\n        const setErrorDescription = function (text)
    {\n            Array.prototype.forEach.call(document.getElementsByClassName('error-description'),
    function ($el) {\n                $el.innerHTML = text;\n            });\n        };\n\n
    \       const message = `Service Unavailable`.trim(), cards = {\n            $client:
    document.getElementById('client-status-card'),\n            $network: document.getElementById('network-status-card'),\n
    \           $server: document.getElementById('server-status-card'),\n        };\n\n
    \       let whatToDo = 'Please try again in a few minutes';\n\n        switch
    (true) {\n            case errorCode >= 400 && errorCode <= 499:\n                switch
    (errorCode) {\n                    case 400: case 405: case 411: case 413: whatToDo
    = 'Please try to change the request method, headers, payload, or URL'; break;\n
    \                   case 401: case 403: case 407: whatToDo = 'Please check your
    authorization data'; break;\n                    case 404: whatToDo = 'Please
    double-check the URL and try again'; break;\n                    case 409: case
    410: case 418: whatToDo = '¯\\\\_(ツ)_/¯'; break;\n                }\n\n                setErrorDescription(`<span
    data-l10n>${message}</span> (<span data-l10n>client-side error</span>)`);\n                setCardState(cards.$client,
    {isError: true}, message)\n                setCardState(cards.$network, {isOk:
    true}, 'Working')\n                setCardState(cards.$server, {isOk: true}, 'Working')\n
    \               break;\n\n            case errorCode >= 500 && errorCode <= 599:\n
    \               setErrorDescription(`<span data-l10n>${message}</span> (<span
    data-l10n>server-side error</span>)`);\n                setCardState(cards.$client,
    {isOk: true}, 'Working')\n                setCardState(cards.$network, {isOk:
    true}, 'Working')\n                setCardState(cards.$server, {isError: true},
    message)\n                break;\n\n            default:\n                setErrorDescription(message);\n
    \               setCardState(cards.$client, {isWarning: true}, 'Unknown')\n                setCardState(cards.$network,
    {isOk: true}, 'Working')\n                setCardState(cards.$server, {isWarning:
    true}, 'Unknown')\n                break;\n        }\n\n        setReasons({whatHappened:
    `The server is temporarily overloading or down`.trim(), whatToDo: whatToDo.trim()});\n
    \   } else {\n        console.warn('Cannot parse the error code:', errorCode);\n
    \   }\n\n    // \n    if (navigator.language.substring(0, 2).toLowerCase() !==
    'en') {\n        ((s, p) => { // localize the page (details here - https://github.com/tarampampam/error-pages/tree/master/l10n)\n
    \           s.src = 'https://cdn.jsdelivr.net/gh/tarampampam/error-pages@2/l10n/l10n.min.js';
    // '../l10n/l10n.js';\n            s.async = s.defer = true;\n            s.addEventListener('load',
    () => p.removeChild(s));\n            p.appendChild(s);\n        })(document.createElement('script'),
    document.body);\n    }\n    // \n</script>\n<!--\n    Error 503: Service Unavailable\n
    \   Description: The server is temporarily overloading or down\n-->\n</html>\n"
kind: ConfigMap
metadata:
  name: custom-error-code-pages
  namespace: openshift-config
